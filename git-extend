#!/usr/bin/env bash

###
### git-extend: Extend Git with command wrappers.
###

BYPASS=0
PREFIX="/usr/local"
BINDIR="$PREFIX/bin"
GIT="$BINDIR/git"
ARGV=()

for ARG in "$@"; do
	case $ARG in
		--bypass)
			BYPASS=1
		;;
		*)
			ARGV+=("$ARG")
		;;
	esac
done

# Reset $@ without git-extend(1) options.
set -- "${ARGV[@]}"
unset ARGV
unset ARG

if [[ -n $TLPID ]] && [[ $TLPID -eq $PPID ]]; then
	BYPASS=1
fi

if [[ $BYPASS -eq 1 ]]; then
	exec $GIT "$@"

	exit $?
fi

# Top-level PID.
export TLPID="$$"

# Pathnames from $PATH.
SCOPES="$(echo $PATH | tr ':' '\n')"

for PATHNAME in ${SCOPES[@]}; do
	ARGV=("$@")
	COUNT=0

	while [[ ${#ARGV[@]} -gt 0 ]]; do
		TARGET="$PATHNAME/git-${ARGV[0]}"

		if [[ -f "$TARGET" ]] && [[ -x "$TARGET" ]]; then
			# Executable path with git(1) options, arguments (e.g. '/usr/bin/git -C ~/project').
			# $GIT should be called from within the command wrappers to ensure proper handling.
			export GIT="$GIT ${@:1:COUNT}"

			# Execute $TARGET with command-specific arguments only.
			exec $TARGET "${ARGV[@]:1}"

			exit $?
		fi

		ARGV=("${ARGV[@]:1}")
		let "COUNT++"
	done
done

exec $GIT "$@"
