#!/usr/bin/env bash

###
### git-extend: Extend Git builtins with command wrappers.
###

SCOPES="$(echo $PATH | tr ':' '\n')"
GITPREFIX="/usr"
BINDIR="$GITPREFIX/bin"
GIT="$BINDIR/git"
ARGV=()

VERSION="1.0.0"
read -r -d '' USAGE <<-EOS
  Usage: git extend [OPTIONS]

  OPTIONS:
    --list,    -l: List all git-* executables found in PATH.
    --path,    -p: Get absolute path to git symlink.
    --help,    -h: Show usage information.
    --version, -V: Show current version.
EOS

for ARG in "$@"; do
	case $ARG in
		extend)
			shift

			# git-extend(1) specific options.
			case $1 in
				--help|-h)
					echo "$USAGE"

					exit 0
				;;
				--version|-V)
					echo "$VERSION"

					exit 0
				;;
				--list|-l)
					for PATHNAME in ${SCOPES[@]}; do
						find -L $PATHNAME -maxdepth 1 \( -type f -o -type l \) -name "git-*" -exec test -x {} \; -exec ls {} \; 2>/dev/null ;
					done

					exit 0
				;;
				--path|-p)
					echo "${BASH_SOURCE[0]}"

					exit 0
				;;
				*)
					printf 'Invalid option %s\n' "$1"

					exit 1
				;;
			esac
		;;
		--bypass)
			BYPASS=1
		;;
		*)
			ARGV+=("$ARG")
		;;
	esac
done

# Reset $@ without git-extend(1) options.
set -- "${ARGV[@]}"
unset ARGV
unset ARG

# In a situation where a command wrapper calls `git`
# instead of $GIT, check $TLPID against $PPID, and
# exit if the calling PID is a match.
if [[ -n $TLPID ]] && [[ $TLPID -eq $PPID ]]; then
	BYPASS=1
fi

if [[ -n $BYPASS ]] && [[ $BYPASS -eq 1 ]]; then
	$GIT "$@"

	exit $?
fi

# Top-level PID.
export TLPID="$$"

for PATHNAME in ${SCOPES[@]}; do
	ARGV=("$@")
	COUNT=0

	while [[ ${#ARGV[@]} -gt 0 ]]; do
		PARAM="${ARGV[0]}"

		# Mitigate any ambiguity stemming from certain git(1) options.
		# (e.g. 'git -C diff log', where 'diff' is a relative directory)
		case $PARAM in
			-C)
				CHDIR="${ARGV[1]}"
			;;
		esac

		TARGET="$PATHNAME/git-${PARAM}"

		if [[ $PARAM != $CHDIR ]] && [[ -x $TARGET ]]; then
			# Executable path with git(1) options, arguments (e.g. '/usr/bin/git -C ~/project').
			# $GIT should be called from within the command wrappers to ensure proper handling.
			export GIT="$GIT ${@:1:COUNT}"

			# Execute $TARGET with command-specific arguments only.
			$TARGET "${ARGV[@]:1}"

			exit $?
		fi

		ARGV=("${ARGV[@]:1}")
		let COUNT++
	done
done

$GIT "$@"
